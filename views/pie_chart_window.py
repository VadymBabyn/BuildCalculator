from PyQt5.QtWidgets import (
    QVBoxLayout, QPushButton, QApplication, QDialog, QComboBox, QLabel, QFileDialog, QSizePolicy
)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from utils.pytorch_model import CostPredictionService


class PieChartWindow(QDialog):
    def __init__(self, data):
        super().__init__()
        self.setWindowTitle("–ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç")
        self.setGeometry(100, 100, 1000, 600)
        self.data = [d for d in data if d["planned"] > 0 or d["actual"] > 0]
        self.predictor = CostPredictionService()
        layout = QVBoxLayout()
        self.setLayout(layout)

        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –≥—Ä–∞—Ñ—ñ–∫—É
        self.chart_type = QComboBox()
        self.chart_type.addItems(["–ö—Ä—É–≥–æ–≤–∞", "–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞"])
        self.chart_type.currentIndexChanged.connect(self.plot)
        layout.addWidget(self.chart_type)

        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏ —É PNG")
        save_btn.clicked.connect(self.save_chart)
        layout.addWidget(save_btn)

        # –ü–ª–æ—â–∏–Ω–∞ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout.addWidget(self.canvas)

        # –ú—ñ—Å—Ü–µ –¥–ª—è –≤–∏–≤–æ–¥—É –∞–Ω–∞–ª—ñ–∑—É
        self.analysis_label = QLabel()
        self.analysis_label.setWordWrap(True)
        layout.addWidget(self.analysis_label)

        self.plot()

    def analyze_and_predict(self, stages):
        # –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å –≤–∂–µ –æ–±—Ä–æ–±–∏—Ç—å –∑–∞–Ω–∏–∂–µ–Ω—ñ actual
        total_planned = sum(s["planned"] for s in stages)
        total_actual = sum(s["actual"] for s in stages)

        diff = total_actual - total_planned

        analysis_text = (
            f"<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b><br>"
            f"‚ñ∏ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ: {total_planned:,} –≥—Ä–Ω<br>"
            f"‚ñ∏ –§–∞–∫—Ç–∏—á–Ω–æ (–Ω–∞—è–≤–Ω—ñ): {total_actual:,} –≥—Ä–Ω<br>"
        )

        if diff > 0:
            analysis_text += f"<span style='color:red;'>‚û§ –ë—é–¥–∂–µ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–∞ {diff:,} –≥—Ä–Ω</span><br>"
        elif diff < 0:
            analysis_text += f"<span style='color:green;'>‚û§ –ï–∫–æ–Ω–æ–º—ñ—è: {-diff:,} –≥—Ä–Ω</span><br>"
        else:
            analysis_text += "<span style='color:blue;'>‚û§ –í–∏—Ç—Ä–∞—Ç–∏ —Ç–æ—á–Ω–æ –ø–æ –ø–ª–∞–Ω—É</span><br>"

        # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        predicted_total = self.predictor.train_and_predict(stages)
        if predicted_total:
            analysis_text += (
                f"<br><b>–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</b><br>"
                f"üîÆ {predicted_total:,} –≥—Ä–Ω<br>"
                f"üìâ –û—á—ñ–∫—É–≤–∞–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {predicted_total - total_planned:,} –≥—Ä–Ω"
            )
        else:
            analysis_text += (
                "<br><i>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É: –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ 3 –µ—Ç–∞–ø—ñ–≤ –∑ –Ω–∞—è–≤–Ω–∏–º–∏ —Ñ–∞–∫—Ç–∏—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.</i>"
            )

        self.analysis_label.setText(analysis_text)
        self.canvas.draw()

    def plot(self):
        self.figure.clear()
        chart_type = self.chart_type.currentText()
        if chart_type == "–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞":
            ax1 = self.figure.add_subplot(111)
            ax2 = None
        else:
            ax1 = self.figure.add_subplot(121)
            ax2 = self.figure.add_subplot(122)

        labels = [d["stage"] for d in self.data]
        planned = [d["planned"] for d in self.data]
        actual = [d["actual"] for d in self.data]

        def make_autopct(values):
            def my_autopct(pct):
                total = sum(values)
                val = int(round(pct * total / 100.0))
                return f'{pct:.1f}%\n({val} –≥—Ä–Ω)'
            return my_autopct

        # Pie charts
        if chart_type == "–ö—Ä—É–≥–æ–≤–∞":
            from matplotlib import cm
            color_map = cm.get_cmap('tab20', len(labels))
            colors = [color_map(i) for i in range(len(labels))]

            planned_labels = [f"{label} ({value:,} –≥—Ä–Ω)" for label, value in zip(labels, planned)]
            actual_labels = [f"{label} ({value:,} –≥—Ä–Ω)" for label, value in zip(labels, actual)]

            def autopct_filter(pct):
                return f"{pct:.1f}%" if pct >= 3 else ""

            wedges1, texts1, autotexts1 = ax1.pie(
                planned,
                labels=None,
                autopct=autopct_filter,
                startangle=140,
                colors=colors
            )
            ax1.legend(wedges1, planned_labels, title="–ï—Ç–∞–ø–∏", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
            ax1.set_title("–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏")

            wedges2, texts2, autotexts2 = ax2.pie(
                actual,
                labels=None,
                autopct=autopct_filter,
                startangle=140,
                colors=colors
            )
            ax2.legend(wedges2, actual_labels, title="–ï—Ç–∞–ø–∏", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
            ax2.set_title("–§–∞–∫—Ç–∏—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏")


        elif chart_type == "–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞":
            x = range(len(labels))
            bar_width = 0.35

            bars1 = ax1.bar(x, planned, width=bar_width, label='–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ', color='skyblue')
            bars2 = ax1.bar([p + bar_width for p in x], actual, width=bar_width, label='–§–∞–∫—Ç–∏—á–Ω–æ', color='orange')

            ax1.set_xticks([p + bar_width / 2 for p in x])
            ax1.set_xticklabels(labels, rotation=45, ha="right")
            ax1.set_title("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –ø–æ –µ—Ç–∞–ø–∞—Ö")
            ax1.legend()

            # –ü—ñ–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–æ–≤–ø—Ü—è—Ö
            for bar in bars1:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width() / 2, height + 200, f'{int(height)}', ha='center', va='bottom', rotation=90)

            for bar in bars2:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width() / 2, height + 200, f'{int(height)}', ha='center', va='bottom', rotation=90)

            if ax2 in self.figure.axes:
                self.figure.delaxes(ax2)

        self.analyze_and_predict(self.data)
        self.canvas.draw()

    def save_chart(self):
        chart_type = self.chart_type.currentText().replace(" ", "_").lower()
        default_filename = f"stage_detail_{chart_type}.png"

        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–ó–±–µ—Ä–µ–≥—Ç–∏ –¥—ñ–∞–≥—Ä–∞–º—É —è–∫ PNG",
            default_filename,
            "PNG —Ñ–∞–π–ª–∏ (*.png);;–í—Å—ñ —Ñ–∞–π–ª–∏ (*)"
        )

        if file_path:
            self.figure.savefig(file_path)

if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    window = PieChartWindow(data=[])
    window.show()

    sys.exit(app.exec_())